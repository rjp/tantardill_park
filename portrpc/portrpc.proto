syntax = "proto3";
package portrpc;

// All our RPC server needs to do is: create or update an
// existing record (`PutPort`) and allow the client service
// to 'retrieve the data' (`GetPortByShortcode`).
service PortDatabase {
    rpc PutPort (Port) returns (PutResponse);
    rpc GetPortByShortcode (Shortcode) returns (Port);
    rpc GetShortcodes (GetShortcodesRequest) returns (stream Shortcode);
}

message PutResponse {
    string Response = 1;
}

message Shortcode {
    string Shortcode = 1;
}

// "Make a new message that simply has no fields. That way you can
// add new fields when you need to and not break any application code."
message GetShortcodesRequest {
}

// Mildly cheated by using `go2proto` for this to start with.
// Annoyingly it lowercases all the fieldnames. But it'll do
// as a start. Later versions could use `struct.proto` and
// work of a 'real' Go `struct` (if that gives any benefit.)
message Port {
  string name = 1;
  string city = 2;
  string country = 3;
  repeated string alias = 4;
  repeated string regions = 5;
  repeated double coordinates = 6;
  string province = 7;
  string timezone = 8;
  repeated string unlocs = 9;
  string code = 10;
  string shortcode = 11;
}

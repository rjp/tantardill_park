// Code generated by protoc-gen-go. DO NOT EDIT.
// source: portrpc.proto

package portrpc

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type PutResponse struct {
	Response             string   `protobuf:"bytes,1,opt,name=Response,proto3" json:"Response,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PutResponse) Reset()         { *m = PutResponse{} }
func (m *PutResponse) String() string { return proto.CompactTextString(m) }
func (*PutResponse) ProtoMessage()    {}
func (*PutResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3ca1483cacdcc443, []int{0}
}

func (m *PutResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PutResponse.Unmarshal(m, b)
}
func (m *PutResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PutResponse.Marshal(b, m, deterministic)
}
func (m *PutResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PutResponse.Merge(m, src)
}
func (m *PutResponse) XXX_Size() int {
	return xxx_messageInfo_PutResponse.Size(m)
}
func (m *PutResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_PutResponse.DiscardUnknown(m)
}

var xxx_messageInfo_PutResponse proto.InternalMessageInfo

func (m *PutResponse) GetResponse() string {
	if m != nil {
		return m.Response
	}
	return ""
}

type Shortcode struct {
	Shortcode            string   `protobuf:"bytes,1,opt,name=Shortcode,proto3" json:"Shortcode,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Shortcode) Reset()         { *m = Shortcode{} }
func (m *Shortcode) String() string { return proto.CompactTextString(m) }
func (*Shortcode) ProtoMessage()    {}
func (*Shortcode) Descriptor() ([]byte, []int) {
	return fileDescriptor_3ca1483cacdcc443, []int{1}
}

func (m *Shortcode) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Shortcode.Unmarshal(m, b)
}
func (m *Shortcode) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Shortcode.Marshal(b, m, deterministic)
}
func (m *Shortcode) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Shortcode.Merge(m, src)
}
func (m *Shortcode) XXX_Size() int {
	return xxx_messageInfo_Shortcode.Size(m)
}
func (m *Shortcode) XXX_DiscardUnknown() {
	xxx_messageInfo_Shortcode.DiscardUnknown(m)
}

var xxx_messageInfo_Shortcode proto.InternalMessageInfo

func (m *Shortcode) GetShortcode() string {
	if m != nil {
		return m.Shortcode
	}
	return ""
}

// Mildly cheated by using `go2proto` for this to start with.
// Annoyingly it lowercases all the fieldnames. But it'll do
// as a start. Later versions could use `struct.proto` and
// work of a 'real' Go `struct` (if that gives any benefit.)
type Port struct {
	Name                 string    `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	City                 string    `protobuf:"bytes,2,opt,name=city,proto3" json:"city,omitempty"`
	Country              string    `protobuf:"bytes,3,opt,name=country,proto3" json:"country,omitempty"`
	Alias                []string  `protobuf:"bytes,4,rep,name=alias,proto3" json:"alias,omitempty"`
	Regions              []string  `protobuf:"bytes,5,rep,name=regions,proto3" json:"regions,omitempty"`
	Coordinates          []float64 `protobuf:"fixed64,6,rep,packed,name=coordinates,proto3" json:"coordinates,omitempty"`
	Province             string    `protobuf:"bytes,7,opt,name=province,proto3" json:"province,omitempty"`
	Timezone             string    `protobuf:"bytes,8,opt,name=timezone,proto3" json:"timezone,omitempty"`
	Unlocs               []string  `protobuf:"bytes,9,rep,name=unlocs,proto3" json:"unlocs,omitempty"`
	Code                 string    `protobuf:"bytes,10,opt,name=code,proto3" json:"code,omitempty"`
	Shortcode            string    `protobuf:"bytes,11,opt,name=shortcode,proto3" json:"shortcode,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *Port) Reset()         { *m = Port{} }
func (m *Port) String() string { return proto.CompactTextString(m) }
func (*Port) ProtoMessage()    {}
func (*Port) Descriptor() ([]byte, []int) {
	return fileDescriptor_3ca1483cacdcc443, []int{2}
}

func (m *Port) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Port.Unmarshal(m, b)
}
func (m *Port) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Port.Marshal(b, m, deterministic)
}
func (m *Port) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Port.Merge(m, src)
}
func (m *Port) XXX_Size() int {
	return xxx_messageInfo_Port.Size(m)
}
func (m *Port) XXX_DiscardUnknown() {
	xxx_messageInfo_Port.DiscardUnknown(m)
}

var xxx_messageInfo_Port proto.InternalMessageInfo

func (m *Port) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Port) GetCity() string {
	if m != nil {
		return m.City
	}
	return ""
}

func (m *Port) GetCountry() string {
	if m != nil {
		return m.Country
	}
	return ""
}

func (m *Port) GetAlias() []string {
	if m != nil {
		return m.Alias
	}
	return nil
}

func (m *Port) GetRegions() []string {
	if m != nil {
		return m.Regions
	}
	return nil
}

func (m *Port) GetCoordinates() []float64 {
	if m != nil {
		return m.Coordinates
	}
	return nil
}

func (m *Port) GetProvince() string {
	if m != nil {
		return m.Province
	}
	return ""
}

func (m *Port) GetTimezone() string {
	if m != nil {
		return m.Timezone
	}
	return ""
}

func (m *Port) GetUnlocs() []string {
	if m != nil {
		return m.Unlocs
	}
	return nil
}

func (m *Port) GetCode() string {
	if m != nil {
		return m.Code
	}
	return ""
}

func (m *Port) GetShortcode() string {
	if m != nil {
		return m.Shortcode
	}
	return ""
}

func init() {
	proto.RegisterType((*PutResponse)(nil), "portrpc.PutResponse")
	proto.RegisterType((*Shortcode)(nil), "portrpc.Shortcode")
	proto.RegisterType((*Port)(nil), "portrpc.Port")
}

func init() { proto.RegisterFile("portrpc.proto", fileDescriptor_3ca1483cacdcc443) }

var fileDescriptor_3ca1483cacdcc443 = []byte{
	// 296 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x54, 0x91, 0xbf, 0x6a, 0xc3, 0x30,
	0x10, 0xc6, 0xc9, 0x5f, 0xc7, 0x97, 0x66, 0x39, 0x42, 0x11, 0xa1, 0x83, 0xc9, 0xe4, 0x2c, 0x1e,
	0xda, 0xa1, 0x7b, 0x29, 0x74, 0x35, 0xee, 0x13, 0x28, 0x8a, 0x68, 0x05, 0x89, 0xce, 0x48, 0x72,
	0x8b, 0xfb, 0x2c, 0x7d, 0xd8, 0x22, 0xd9, 0xb2, 0xdd, 0xed, 0x7e, 0x3f, 0x7d, 0xd8, 0xdc, 0x77,
	0xb0, 0xab, 0xc9, 0x38, 0x53, 0x8b, 0xa2, 0x36, 0xe4, 0x08, 0x93, 0x1e, 0x8f, 0x27, 0xd8, 0x96,
	0x8d, 0xab, 0xa4, 0xad, 0x49, 0x5b, 0x89, 0x07, 0xd8, 0xc4, 0x99, 0xcd, 0xb2, 0x59, 0x9e, 0x56,
	0x03, 0x1f, 0x4f, 0x90, 0xbe, 0x7f, 0x92, 0x71, 0x82, 0x2e, 0x12, 0x1f, 0x26, 0xd0, 0x27, 0x47,
	0x71, 0xfc, 0x9d, 0xc3, 0xb2, 0x24, 0xe3, 0x10, 0x61, 0xa9, 0xf9, 0x2d, 0x26, 0xc2, 0xec, 0x9d,
	0x50, 0xae, 0x65, 0xf3, 0xce, 0xf9, 0x19, 0x19, 0x24, 0x82, 0x1a, 0xed, 0x4c, 0xcb, 0x16, 0x41,
	0x47, 0xc4, 0x3d, 0xac, 0xf8, 0x55, 0x71, 0xcb, 0x96, 0xd9, 0x22, 0x4f, 0xab, 0x0e, 0x7c, 0xde,
	0xc8, 0x0f, 0x45, 0xda, 0xb2, 0x55, 0xf0, 0x11, 0x31, 0x83, 0xad, 0x20, 0x32, 0x17, 0xa5, 0xb9,
	0x93, 0x96, 0xad, 0xb3, 0x45, 0x3e, 0xab, 0xa6, 0xca, 0xef, 0x58, 0x1b, 0xfa, 0x52, 0x5a, 0x48,
	0x96, 0x74, 0x3b, 0x46, 0xf6, 0x6f, 0x4e, 0xdd, 0xe4, 0x0f, 0x69, 0xc9, 0x36, 0xdd, 0x5b, 0x64,
	0xbc, 0x87, 0x75, 0xa3, 0xaf, 0x24, 0x2c, 0x4b, 0xc3, 0x2f, 0x7b, 0x0a, 0xfb, 0xf8, 0x16, 0xa0,
	0xdf, 0xa7, 0xaf, 0xc7, 0x0e, 0xf5, 0x6c, 0xbb, 0x7a, 0x06, 0xf1, 0xf8, 0x0d, 0x77, 0xbe, 0x9d,
	0x57, 0xee, 0xf8, 0x99, 0x5b, 0x89, 0x05, 0x24, 0x65, 0xe3, 0x42, 0x61, 0xbb, 0x22, 0x1e, 0xca,
	0xe3, 0x61, 0x3f, 0xe2, 0xe4, 0x4a, 0xcf, 0x80, 0x6f, 0x32, 0xe4, 0x5f, 0xda, 0xf1, 0x24, 0x38,
	0x64, 0x07, 0x77, 0xf8, 0xff, 0xb9, 0xf3, 0x3a, 0x5c, 0xff, 0xe9, 0x2f, 0x00, 0x00, 0xff, 0xff,
	0xd6, 0xa5, 0x3b, 0x9a, 0x0e, 0x02, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// PortDatabaseClient is the client API for PortDatabase service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type PortDatabaseClient interface {
	PutPort(ctx context.Context, in *Port, opts ...grpc.CallOption) (*PutResponse, error)
	GetPortByShortcode(ctx context.Context, in *Shortcode, opts ...grpc.CallOption) (*Port, error)
}

type portDatabaseClient struct {
	cc *grpc.ClientConn
}

func NewPortDatabaseClient(cc *grpc.ClientConn) PortDatabaseClient {
	return &portDatabaseClient{cc}
}

func (c *portDatabaseClient) PutPort(ctx context.Context, in *Port, opts ...grpc.CallOption) (*PutResponse, error) {
	out := new(PutResponse)
	err := c.cc.Invoke(ctx, "/portrpc.PortDatabase/PutPort", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *portDatabaseClient) GetPortByShortcode(ctx context.Context, in *Shortcode, opts ...grpc.CallOption) (*Port, error) {
	out := new(Port)
	err := c.cc.Invoke(ctx, "/portrpc.PortDatabase/GetPortByShortcode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PortDatabaseServer is the server API for PortDatabase service.
type PortDatabaseServer interface {
	PutPort(context.Context, *Port) (*PutResponse, error)
	GetPortByShortcode(context.Context, *Shortcode) (*Port, error)
}

// UnimplementedPortDatabaseServer can be embedded to have forward compatible implementations.
type UnimplementedPortDatabaseServer struct {
}

func (*UnimplementedPortDatabaseServer) PutPort(ctx context.Context, req *Port) (*PutResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutPort not implemented")
}
func (*UnimplementedPortDatabaseServer) GetPortByShortcode(ctx context.Context, req *Shortcode) (*Port, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPortByShortcode not implemented")
}

func RegisterPortDatabaseServer(s *grpc.Server, srv PortDatabaseServer) {
	s.RegisterService(&_PortDatabase_serviceDesc, srv)
}

func _PortDatabase_PutPort_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Port)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PortDatabaseServer).PutPort(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/portrpc.PortDatabase/PutPort",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PortDatabaseServer).PutPort(ctx, req.(*Port))
	}
	return interceptor(ctx, in, info, handler)
}

func _PortDatabase_GetPortByShortcode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Shortcode)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PortDatabaseServer).GetPortByShortcode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/portrpc.PortDatabase/GetPortByShortcode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PortDatabaseServer).GetPortByShortcode(ctx, req.(*Shortcode))
	}
	return interceptor(ctx, in, info, handler)
}

var _PortDatabase_serviceDesc = grpc.ServiceDesc{
	ServiceName: "portrpc.PortDatabase",
	HandlerType: (*PortDatabaseServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PutPort",
			Handler:    _PortDatabase_PutPort_Handler,
		},
		{
			MethodName: "GetPortByShortcode",
			Handler:    _PortDatabase_GetPortByShortcode_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "portrpc.proto",
}
